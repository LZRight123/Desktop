//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "GT3APIServiceDelegate-Protocol.h"
#import "GT3CaptchaDelegate-Protocol.h"
#import "GT3MotionManagerDelegate-Protocol.h"
#import "GT3ViewDelegate-Protocol.h"

@class GT3APIService, GT3DataBase, GT3Error, GT3MotionManager, GT3NetworkReachabilityManager, GT3TouchEventFaker, GT3View, GT3ViewConfiguration, GTHTTPSessionManager, NSMutableDictionary, NSMutableURLRequest, NSNumber, NSString, NSURL, NSURLRequest, UIBlurEffect, UIColor, UIControl, UIVisualEffectView;
@protocol GT3CaptchaManagerDelegate, GT3CaptchaManagerStatisticDelegate, GT3CaptchaManagerViewDelegate;

@interface GT3CaptchaManager : NSObject <GT3ViewDelegate, GT3CaptchaDelegate, GT3APIServiceDelegate, GT3MotionManagerDelegate>
{
    _Bool _isShowing;
    _Bool _animated;
    _Bool _enableDebug;
    _Bool _disableBackgroundUserInteraction;
    _Bool _enableNetworkReachability;
    _Bool _disableMotion;
    _Bool _forceCaptcha;
    _Bool _isReadyForGraph;
    _Bool _logoState;
    id <GT3CaptchaManagerDelegate> _delegate;
    id <GT3CaptchaManagerViewDelegate> _viewDelegate;
    id <GT3CaptchaManagerStatisticDelegate> _statisticDelegate;
    long long _captchaState;
    NSURL *_API_1;
    NSURL *_API_2;
    NSString *_gt_captcha_id;
    NSString *_gt_challenge;
    NSNumber *_gt_success_code;
    UIColor *_maskColor;
    GTHTTPSessionManager *_httpSessionManager;
    GT3NetworkReachabilityManager *_reachabilityManager;
    GT3TouchEventFaker *_touchEventFaker;
    GT3MotionManager *_motionManager;
    GT3APIService *_apiService;
    GT3DataBase *_dataBase;
    long long _coreState;
    GT3ViewConfiguration *_viewConfig;
    UIBlurEffect *_blurEffect;
    NSString *_title;
    NSString *_languageString;
    NSString *_baseAPIParams;
    NSString *_superAPIParams;
    GT3Error *_error;
    long long _uiMode;
    long long _indicatorType;
    long long _schemeOption;
    CDUnknownBlockType _animationBlock;
    CDUnknownBlockType _registerHandler;
    double _timeoutInterval;
    NSURLRequest *_currentAPI1Request;
    NSMutableURLRequest *_currentAPI2Request;
    UIVisualEffectView *_visualView;
    UIControl *_backgroundControl;
    GT3View *_gtView;
    double _gtViewTimeout;
    double _startTime;
    double _clickTime;
    double _interactionTime;
    double _validatetime;
    NSMutableDictionary *_statisticInfo;
    struct CGSize _defaultSize;
}

+ (id)sharedGTManagerWithAPI1:(id)arg1 API2:(id)arg2 timeout:(double)arg3;
+ (id)sdkVersion;
@property(retain, nonatomic) NSMutableDictionary *statisticInfo; // @synthesize statisticInfo=_statisticInfo;
@property(nonatomic) double validatetime; // @synthesize validatetime=_validatetime;
@property(nonatomic) double interactionTime; // @synthesize interactionTime=_interactionTime;
@property(nonatomic) double clickTime; // @synthesize clickTime=_clickTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) double gtViewTimeout; // @synthesize gtViewTimeout=_gtViewTimeout;
@property(retain, nonatomic) GT3View *gtView; // @synthesize gtView=_gtView;
@property(retain, nonatomic) UIControl *backgroundControl; // @synthesize backgroundControl=_backgroundControl;
@property(retain, nonatomic) UIVisualEffectView *visualView; // @synthesize visualView=_visualView;
@property(retain, nonatomic) NSMutableURLRequest *currentAPI2Request; // @synthesize currentAPI2Request=_currentAPI2Request;
@property(retain, nonatomic) NSURLRequest *currentAPI1Request; // @synthesize currentAPI1Request=_currentAPI1Request;
@property(nonatomic) double timeoutInterval; // @synthesize timeoutInterval=_timeoutInterval;
@property(copy, nonatomic) CDUnknownBlockType registerHandler; // @synthesize registerHandler=_registerHandler;
@property(copy, nonatomic) CDUnknownBlockType animationBlock; // @synthesize animationBlock=_animationBlock;
@property(nonatomic) long long schemeOption; // @synthesize schemeOption=_schemeOption;
@property(nonatomic) long long indicatorType; // @synthesize indicatorType=_indicatorType;
@property(nonatomic) _Bool logoState; // @synthesize logoState=_logoState;
@property(nonatomic) _Bool isReadyForGraph; // @synthesize isReadyForGraph=_isReadyForGraph;
@property(nonatomic) _Bool forceCaptcha; // @synthesize forceCaptcha=_forceCaptcha;
@property(nonatomic) long long uiMode; // @synthesize uiMode=_uiMode;
@property(retain, nonatomic) GT3Error *error; // @synthesize error=_error;
@property(retain, nonatomic) NSString *superAPIParams; // @synthesize superAPIParams=_superAPIParams;
@property(retain, nonatomic) NSString *baseAPIParams; // @synthesize baseAPIParams=_baseAPIParams;
@property(nonatomic) _Bool disableMotion; // @synthesize disableMotion=_disableMotion;
@property(nonatomic) _Bool enableNetworkReachability; // @synthesize enableNetworkReachability=_enableNetworkReachability;
@property(nonatomic) _Bool disableBackgroundUserInteraction; // @synthesize disableBackgroundUserInteraction=_disableBackgroundUserInteraction;
@property(nonatomic) _Bool enableDebug; // @synthesize enableDebug=_enableDebug;
@property(nonatomic) _Bool animated; // @synthesize animated=_animated;
@property(readonly, nonatomic) NSString *languageString; // @synthesize languageString=_languageString;
@property(readonly, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic) UIBlurEffect *blurEffect; // @synthesize blurEffect=_blurEffect;
@property(retain, nonatomic) GT3ViewConfiguration *viewConfig; // @synthesize viewConfig=_viewConfig;
@property(readonly, nonatomic) struct CGSize defaultSize; // @synthesize defaultSize=_defaultSize;
@property(nonatomic) long long coreState; // @synthesize coreState=_coreState;
@property(retain, nonatomic) GT3DataBase *dataBase; // @synthesize dataBase=_dataBase;
@property(retain, nonatomic) GT3APIService *apiService; // @synthesize apiService=_apiService;
@property(retain, nonatomic) GT3MotionManager *motionManager; // @synthesize motionManager=_motionManager;
@property(retain, nonatomic) GT3TouchEventFaker *touchEventFaker; // @synthesize touchEventFaker=_touchEventFaker;
@property(retain, nonatomic) GT3NetworkReachabilityManager *reachabilityManager; // @synthesize reachabilityManager=_reachabilityManager;
@property(retain, nonatomic) GTHTTPSessionManager *httpSessionManager; // @synthesize httpSessionManager=_httpSessionManager;
@property(retain, nonatomic) UIColor *maskColor; // @synthesize maskColor=_maskColor;
@property(readonly, nonatomic) NSNumber *gt_success_code; // @synthesize gt_success_code=_gt_success_code;
@property(readonly, nonatomic) NSString *gt_challenge; // @synthesize gt_challenge=_gt_challenge;
@property(readonly, nonatomic) NSString *gt_captcha_id; // @synthesize gt_captcha_id=_gt_captcha_id;
@property(readonly, nonatomic) NSURL *API_2; // @synthesize API_2=_API_2;
@property(readonly, nonatomic) NSURL *API_1; // @synthesize API_1=_API_1;
@property(readonly, nonatomic) _Bool isShowing; // @synthesize isShowing=_isShowing;
@property(readonly, nonatomic) long long captchaState; // @synthesize captchaState=_captchaState;
@property(nonatomic) __weak id <GT3CaptchaManagerStatisticDelegate> statisticDelegate; // @synthesize statisticDelegate=_statisticDelegate;
@property(nonatomic) __weak id <GT3CaptchaManagerViewDelegate> viewDelegate; // @synthesize viewDelegate=_viewDelegate;
@property(nonatomic) __weak id <GT3CaptchaManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)shakeGTView;
- (void)_fixesWindowLayout_iOS_7;
- (long long)statusBarOrientation;
- (void)applicationDidChangeStatusBarOrientation;
- (void)layoutGTViewOnBackgroundControl;
- (void)showGTViewAddedTo:(id)arg1 withFrame:(struct CGRect)arg2;
- (void)showGTViewPopupOnKeywindow;
- (void)gtCallFinish:(id)arg1 result:(id)arg2 message:(id)arg3;
- (void)gtCallError:(id)arg1;
- (void)gtCallClose;
- (void)gtCallReady;
- (void)gtViewUpdateViewHeight:(float)arg1;
- (void)gtViewErrorHandler:(id)arg1;
- (void)manager:(id)arg1 didUpdateMotionModelWithError:(id)arg2;
- (void)managerDidDetectSensorNotAvailable;
- (void)apiService:(id)arg1 didFailWithError:(id)arg2;
- (void)apiService:(id)arg1 didReceivePrejudgeData:(id)arg2;
- (void)enableDebugMode:(_Bool)arg1;
- (void)disableBackgroundUserInteraction:(_Bool)arg1;
- (void)enableNetworkReachability:(_Bool)arg1;
- (void)disableSecurityAuthentication:(_Bool)arg1;
- (void)useLanguage:(long long)arg1;
- (void)useVisualViewWithEffect:(id)arg1;
- (void)useAnimatedAcitvityIndicator:(CDUnknownBlockType)arg1 withIndicatorType:(long long)arg2;
- (unsigned long long)getStringLength:(id)arg1;
- (void)useGTViewWithTitle:(id)arg1;
- (void)useGTViewWithTimeout:(double)arg1;
- (void)configureGTest:(id)arg1 challenge:(id)arg2 success:(id)arg3 withAPI2:(id)arg4;
- (void)configureGTest:(id)arg1 API2:(id)arg2 withTimeout:(double)arg3;
- (void)cancelRequest;
- (void)gtCaptchaUpdateResultView:(long long)arg1;
- (void)gtCaptchaLoadGTView:(id)arg1;
- (void)requestAPI2;
- (void)secondaryValidae:(id)arg1 result:(id)arg2 message:(id)arg3;
- (void)requestApiService;
- (void)requestFailbackService;
- (void)showGTViewIfAlreadyInitial;
- (void)requestGTCaptchaIfRegiested;
- (void)requestGTCaptcha;
- (void)decideCaptcha;
- (void)requestAPI1;
- (void)startNetworkReachabilityCheck;
- (void)stopNetworkReachabilityCheck;
- (void)resetGTCaptcha;
- (void)stopGTCaptcha;
- (void)startGTCaptcha;
- (void)startGTCaptchaWithAnimated:(_Bool)arg1;
- (void)registerCaptcha:(CDUnknownBlockType)arg1;
- (void)deinit;
- (void)closeGTView;
- (void)closeGTViewIfIsOpen;
- (void)dealloc;
- (id)initWithAPI1:(id)arg1 API2:(id)arg2 timeout:(double)arg3;
- (_Bool)hasResourcesBundle;
- (id)init;
- (id)currentLanguage;
- (void)stopMuteBehavior;
- (void)startMuteBehavior;
- (id)giveMeAHint;
- (id)getCookieValue:(id)arg1;
- (void)notifyStatisticInformation;
- (void)addInfoToStatisticDelegate:(id)arg1 forKey:(id)arg2;
- (void)gtCaptchaErrorHandler:(id)arg1;
- (void)userDidTouchBackgroundControl;
- (void)buttonFlag;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

