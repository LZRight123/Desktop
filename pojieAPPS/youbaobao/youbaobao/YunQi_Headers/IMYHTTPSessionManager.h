//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AFHTTPRequestSerializer, AFHTTPResponseSerializer, AFHTTPSessionManager, AFSecurityPolicy, NSURL, NSURLSessionTask;
@protocol AFURLRequestSerialization, AFURLResponseSerialization, OS_dispatch_group, OS_dispatch_queue;

@interface IMYHTTPSessionManager : NSObject
{
    _Bool _gzipEncoding;
    NSURL *_baseURL;
    NSURLSessionTask *_sessionTask;
    CDUnknownBlockType _willRequestHook;
    unsigned long long _requestCachePolicy;
    AFHTTPRequestSerializer<AFURLRequestSerialization> *_requestSerializer;
    AFHTTPResponseSerializer<AFURLResponseSerialization> *_responseSerializer;
    NSObject<OS_dispatch_queue> *_completionQueue;
    NSObject<OS_dispatch_group> *_completionGroup;
    AFSecurityPolicy *_securityPolicy;
    AFHTTPSessionManager *_sessionManager;
}

+ (id)httpsDomainForIp:(id)arg1;
+ (void)setHTTPSDNS:(id)arg1;
@property(nonatomic) __weak AFHTTPSessionManager *sessionManager; // @synthesize sessionManager=_sessionManager;
@property(retain, nonatomic) AFSecurityPolicy *securityPolicy; // @synthesize securityPolicy=_securityPolicy;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *completionGroup; // @synthesize completionGroup=_completionGroup;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *completionQueue; // @synthesize completionQueue=_completionQueue;
@property(retain, nonatomic) AFHTTPResponseSerializer<AFURLResponseSerialization> *responseSerializer; // @synthesize responseSerializer=_responseSerializer;
@property(retain, nonatomic) AFHTTPRequestSerializer<AFURLRequestSerialization> *requestSerializer; // @synthesize requestSerializer=_requestSerializer;
@property(nonatomic) unsigned long long requestCachePolicy; // @synthesize requestCachePolicy=_requestCachePolicy;
@property(copy, nonatomic) CDUnknownBlockType willRequestHook; // @synthesize willRequestHook=_willRequestHook;
@property(nonatomic) _Bool gzipEncoding; // @synthesize gzipEncoding=_gzipEncoding;
@property(nonatomic) __weak NSURLSessionTask *sessionTask; // @synthesize sessionTask=_sessionTask;
@property(retain, nonatomic) NSURL *baseURL; // @synthesize baseURL=_baseURL;
- (void).cxx_destruct;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)cancel;
- (void)injectDelegateWithTask:(id)arg1;
- (void)gzipEncodingActionByRequest:(id)arg1;
- (void)completeHandler:(id)arg1 response:(id)arg2 responseObject:(id)arg3 error:(id)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)uploadTaskWithStreamedRequest:(id)arg1 uploadProgress:(CDUnknownBlockType)arg2 downloadProgress:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)dataTaskWithRequest:(id)arg1 uploadProgress:(CDUnknownBlockType)arg2 downloadProgress:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)dataTaskWithHTTPMethod:(id)arg1 URLString:(id)arg2 parameters:(id)arg3 uploadProgress:(CDUnknownBlockType)arg4 downloadProgress:(CDUnknownBlockType)arg5 success:(CDUnknownBlockType)arg6 failure:(CDUnknownBlockType)arg7;
- (id)DELETE:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)PATCH:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)PUT:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)POST:(id)arg1 parameters:(id)arg2 constructingBodyWithBlock:(CDUnknownBlockType)arg3 progress:(CDUnknownBlockType)arg4 success:(CDUnknownBlockType)arg5 failure:(CDUnknownBlockType)arg6;
- (id)POST:(id)arg1 parameters:(id)arg2 constructingBodyWithBlock:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)POST:(id)arg1 parameters:(id)arg2 progress:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)POST:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)HEAD:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (id)GET:(id)arg1 parameters:(id)arg2 progress:(CDUnknownBlockType)arg3 success:(CDUnknownBlockType)arg4 failure:(CDUnknownBlockType)arg5;
- (id)GET:(id)arg1 parameters:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (long long)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 returnCredential:(id *)arg3;
- (_Bool)evaluateServerTrust:(struct __SecTrust *)arg1 forDomain:(id)arg2;
- (id)shareSessionManager;
- (id)shareSecurityPolicyMap;
- (id)init;
- (id)initWithManager:(id)arg1;
- (id)initWithBaseURL:(id)arg1;
- (void)finishSetupHook;

@end

