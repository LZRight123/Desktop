//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class FMDatabase, FMDatabaseQueue, NSMutableArray, NSRecursiveLock, NSString;

@interface LKDBHelper : NSObject
{
    _Bool _runingAutoCloseTimer;
    NSString *_encryptionKey;
    FMDatabase *_usingdb;
    FMDatabaseQueue *_bindingQueue;
    NSString *_dbPath;
    NSMutableArray *_createdTableNames;
    NSRecursiveLock *_threadLock;
    long long _lastExecuteDBTime;
    long long _autoCloseDBDelayTime;
}

+ (id)getDBPathWithDBName:(id)arg1;
+ (id)dbHelperWithPath:(id)arg1 save:(id)arg2;
+ (id)dbHelperSingleArray;
+ (_Bool)nullIsEmpty;
+ (void)setNullToEmpty:(_Bool)arg1;
+ (void)setLogError:(_Bool)arg1;
+ (void)clearFileWithTable:(Class)arg1 columns:(id)arg2 type:(long long)arg3;
+ (void)clearNoneData:(Class)arg1 columns:(id)arg2;
+ (void)clearNoneImage:(Class)arg1 columns:(id)arg2;
+ (void)clearTableData:(Class)arg1;
+ (id)getUsingLKDBHelper;
+ (id)sharedDBHelper;
@property(nonatomic) long long autoCloseDBDelayTime; // @synthesize autoCloseDBDelayTime=_autoCloseDBDelayTime;
@property(nonatomic) _Bool runingAutoCloseTimer; // @synthesize runingAutoCloseTimer=_runingAutoCloseTimer;
@property(nonatomic) long long lastExecuteDBTime; // @synthesize lastExecuteDBTime=_lastExecuteDBTime;
@property(retain, nonatomic) NSRecursiveLock *threadLock; // @synthesize threadLock=_threadLock;
@property(retain, nonatomic) NSMutableArray *createdTableNames; // @synthesize createdTableNames=_createdTableNames;
@property(copy, nonatomic) NSString *dbPath; // @synthesize dbPath=_dbPath;
@property(retain, nonatomic) FMDatabaseQueue *bindingQueue; // @synthesize bindingQueue=_bindingQueue;
@property(nonatomic) __weak FMDatabase *usingdb; // @synthesize usingdb=_usingdb;
- (void).cxx_destruct;
- (void)dealloc;
@property(readonly, copy, nonatomic) NSString *encryptionKey; // @synthesize encryptionKey=_encryptionKey;
- (_Bool)rekey:(id)arg1;
- (_Bool)setKey:(id)arg1;
- (id)primaryKeyWhereSQLWithModel:(id)arg1 addPValues:(id)arg2;
- (id)dictionaryToSqlWhere:(id)arg1 andValues:(id)arg2;
- (id)extractQuery:(id)arg1 where:(id)arg2;
- (void)executeForTransaction:(CDUnknownBlockType)arg1;
- (id)executeScalarWithSQL:(id)arg1 arguments:(id)arg2;
- (_Bool)executeSQL:(id)arg1 arguments:(id)arg2;
- (_Bool)autoCloseDBConnection;
- (void)startAutoCloseTimer;
- (void)setAutoCloseDBTime:(long long)arg1;
- (void)executeDB:(CDUnknownBlockType)arg1;
- (void)closeDB;
- (void)openDB;
- (void)setDBPath:(id)arg1;
- (void)setDBName:(id)arg1;
- (id)initWithDBPath:(id)arg1;
- (id)initWithDBName:(id)arg1;
- (id)init;
- (_Bool)getTableCreatedWithTableName:(id)arg1;
- (_Bool)getTableCreatedWithClass:(Class)arg1;
- (_Bool)_createTableWithModelClass:(Class)arg1 tableName:(id)arg2;
- (void)fixSqlColumnsWithClass:(Class)arg1 tableName:(id)arg2;
- (_Bool)dropTableWithTableName:(id)arg1;
- (_Bool)dropTableWithClass:(Class)arg1;
- (void)dropAllTable;
- (_Bool)isExistsWithTableName:(id)arg1 where:(id)arg2;
- (_Bool)isExistsClass:(Class)arg1 where:(id)arg2;
- (_Bool)isExistsModel:(id)arg1;
- (_Bool)_deleteWithTableName:(id)arg1 where:(id)arg2 modelClass:(Class)arg3;
- (_Bool)deleteWithTableName:(id)arg1 where:(id)arg2;
- (void)deleteWithClass:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (_Bool)deleteWithClass:(Class)arg1 where:(id)arg2;
- (_Bool)deleteToDBBase:(id)arg1;
- (void)deleteToDB:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (_Bool)deleteToDB:(id)arg1;
- (_Bool)_updateToDBWithTableName:(id)arg1 set:(id)arg2 where:(id)arg3 modelClass:(Class)arg4;
- (_Bool)updateToDBWithTableName:(id)arg1 set:(id)arg2 where:(id)arg3;
- (_Bool)updateToDB:(Class)arg1 set:(id)arg2 where:(id)arg3;
- (_Bool)updateToDBBase:(id)arg1 where:(id)arg2;
- (void)updateToDB:(id)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (_Bool)updateToDB:(id)arg1 where:(id)arg2;
- (_Bool)insertBase:(id)arg1;
- (void)insertWhenNotExists:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (_Bool)insertWhenNotExists:(id)arg1;
- (void)insertToDB:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (_Bool)insertToDB:(id)arg1;
- (id)executeResult:(id)arg1 Class:(Class)arg2 tableName:(id)arg3;
- (id)executeOneColumnResult:(id)arg1;
- (void)sqlString:(id)arg1 groupBy:(id)arg2 orderBy:(id)arg3 offset:(long long)arg4 count:(long long)arg5;
- (id)search:(Class)arg1 withSQL:(id)arg2;
- (id)searchWithRAWSQL:(id)arg1 toClass:(Class)arg2;
- (id)searchWithSQL:(id)arg1 toClass:(Class)arg2;
- (id)replaceTableNameIfNeeded:(id)arg1 withModelClass:(Class)arg2;
- (id)searchBase:(Class)arg1 columns:(id)arg2 where:(id)arg3 orderBy:(id)arg4 offset:(long long)arg5 count:(long long)arg6;
- (id)searchWithParams:(id)arg1;
- (id)searchBaseWithParams:(id)arg1;
- (void)search:(Class)arg1 where:(id)arg2 orderBy:(id)arg3 offset:(long long)arg4 count:(long long)arg5 callback:(CDUnknownBlockType)arg6;
- (id)searchSingle:(Class)arg1 where:(id)arg2 orderBy:(id)arg3;
- (id)search:(Class)arg1 column:(id)arg2 where:(id)arg3 orderBy:(id)arg4 offset:(long long)arg5 count:(long long)arg6;
- (id)search:(Class)arg1 where:(id)arg2 orderBy:(id)arg3 offset:(long long)arg4 count:(long long)arg5;
- (long long)_rowCountWithTableName:(id)arg1 where:(id)arg2 modelClass:(Class)arg3;
- (long long)rowCountWithTableName:(id)arg1 where:(id)arg2;
- (void)rowCount:(Class)arg1 where:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (long long)rowCount:(Class)arg1 where:(id)arg2;
- (void)asyncBlock:(CDUnknownBlockType)arg1;
- (id)modelValueWithProperty:(id)arg1 model:(id)arg2;
- (_Bool)createTableWithModelClass:(Class)arg1;
- (void)setEncryptionKey:(id)arg1;

@end

