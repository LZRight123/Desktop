#line 1 "/Users/liangze/Documents/Desktop/pojieAPPS/Qianka/QiankaDylib/CCTweakTool/privateApis/__MCMContainer.xm"


#import <UIKit/UIKit.h>
#import "CCHelpTool.h"
#import "__MCMContainer.h"



#include <substrate.h>
#if defined(__clang__)
#if __has_feature(objc_arc)
#define _LOGOS_SELF_TYPE_NORMAL __unsafe_unretained
#define _LOGOS_SELF_TYPE_INIT __attribute__((ns_consumed))
#define _LOGOS_SELF_CONST const
#define _LOGOS_RETURN_RETAINED __attribute__((ns_returns_retained))
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif

@class MCMContainer; 
static id (*_logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$error$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id*); static id _logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id*); static long long (*_logos_orig$_ungrouped$MCMContainer$containerClass)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static long long _logos_method$_ungrouped$MCMContainer$containerClass(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSString * (*_logos_orig$_ungrouped$MCMContainer$identifier)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$MCMContainer$identifier(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSDictionary * (*_logos_orig$_ungrouped$MCMContainer$info)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSDictionary * _logos_method$_ungrouped$MCMContainer$info(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static bool (*_logos_orig$_ungrouped$MCMContainer$isTemporary)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static bool _logos_method$_ungrouped$MCMContainer$isTemporary(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSURL * (*_logos_orig$_ungrouped$MCMContainer$url)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSURL * _logos_method$_ungrouped$MCMContainer$url(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSUUID * (*_logos_orig$_ungrouped$MCMContainer$uuid)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static NSUUID * _logos_method$_ungrouped$MCMContainer$uuid(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static id (*_logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, bool, bool*, id*); static id _logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, bool, bool*, id*); static id (*_logos_meta_orig$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, bool*, id*); static id _logos_meta_method$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, bool*, id*); static void (*_logos_orig$_ungrouped$MCMContainer$_errorOccurred)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MCMContainer$_errorOccurred(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static long long (*_logos_orig$_ungrouped$MCMContainer$_getContainerClass)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static long long _logos_method$_ungrouped$MCMContainer$_getContainerClass(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MCMContainer$dealloc)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MCMContainer$dealloc(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static id (*_logos_orig$_ungrouped$MCMContainer$description)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$MCMContainer$description(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static id (*_logos_orig$_ungrouped$MCMContainer$destroyContainerWithCompletion$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id ); static id _logos_method$_ungrouped$MCMContainer$destroyContainerWithCompletion$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id ); static unsigned long long (*_logos_orig$_ungrouped$MCMContainer$diskUsageWithError$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static unsigned long long _logos_method$_ungrouped$MCMContainer$diskUsageWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static unsigned long long (*_logos_orig$_ungrouped$MCMContainer$hash)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static unsigned long long _logos_method$_ungrouped$MCMContainer$hash(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static id (*_logos_orig$_ungrouped$MCMContainer$infoValueForKey$error$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id, id*); static id _logos_method$_ungrouped$MCMContainer$infoValueForKey$error$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id, id*); static MCMContainer* (*_logos_orig$_ungrouped$MCMContainer$init)(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL) _LOGOS_RETURN_RETAINED; static MCMContainer* _logos_method$_ungrouped$MCMContainer$init(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL) _LOGOS_RETURN_RETAINED; static MCMContainer* (*_logos_orig$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$)(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL, id, bool, bool*, bool, id*) _LOGOS_RETURN_RETAINED; static MCMContainer* _logos_method$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL, id, bool, bool*, bool, id*) _LOGOS_RETURN_RETAINED; static MCMContainer* (*_logos_orig$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$)(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL, id, unsigned int, id, long long, id*) _LOGOS_RETURN_RETAINED; static MCMContainer* _logos_method$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$(_LOGOS_SELF_TYPE_INIT MCMContainer*, SEL, id, unsigned int, id, long long, id*) _LOGOS_RETURN_RETAINED; static bool (*_logos_orig$_ungrouped$MCMContainer$isEqual$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id); static bool _logos_method$_ungrouped$MCMContainer$isEqual$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$MCMContainer$markDeleted)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MCMContainer$markDeleted(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL); static bool (*_logos_orig$_ungrouped$MCMContainer$recreateDefaultStructureWithError$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static bool _logos_method$_ungrouped$MCMContainer$recreateDefaultStructureWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static bool (*_logos_orig$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static bool _logos_method$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id*); static bool (*_logos_orig$_ungrouped$MCMContainer$setInfoValue$forKey$error$)(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id, id, id*); static bool _logos_method$_ungrouped$MCMContainer$setInfoValue$forKey$error$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST, SEL, id, id, id*); 

#line 8 "/Users/liangze/Documents/Desktop/pojieAPPS/Qianka/QiankaDylib/CCTweakTool/privateApis/__MCMContainer.xm"
#pragma mark -
#pragma mark - MCMAppContainer

static id _logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id* arg2) { HBLogDebug(@"+[<MCMContainer: %p> containerWithIdentifier:%@ error:%p]", self, arg1, arg2); id r = _logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$error$(self, _cmd, arg1, arg2); return r; }

static long long _logos_method$_ungrouped$MCMContainer$containerClass(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> containerClass]", self); long long  r = _logos_orig$_ungrouped$MCMContainer$containerClass(self, _cmd); return r; }
static NSString * _logos_method$_ungrouped$MCMContainer$identifier(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> identifier]", self); NSString * r = _logos_orig$_ungrouped$MCMContainer$identifier(self, _cmd); return r; }
static NSDictionary * _logos_method$_ungrouped$MCMContainer$info(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> info]", self); NSDictionary * r = _logos_orig$_ungrouped$MCMContainer$info(self, _cmd); return r; }
static bool _logos_method$_ungrouped$MCMContainer$isTemporary(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> isTemporary]", self); bool  r = _logos_orig$_ungrouped$MCMContainer$isTemporary(self, _cmd); return r; }
static NSURL * _logos_method$_ungrouped$MCMContainer$url(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> url]", self); NSURL * r = _logos_orig$_ungrouped$MCMContainer$url(self, _cmd); return r; }
static NSUUID * _logos_method$_ungrouped$MCMContainer$uuid(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> uuid]", self); NSUUID * r = _logos_orig$_ungrouped$MCMContainer$uuid(self, _cmd); return r; }
static id _logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, bool arg2, bool* arg3, id* arg4) { HBLogDebug(@"+[<MCMContainer: %p> containerWithIdentifier:%@ createIfNecessary:%d existed:%p error:%p]", self, arg1, arg2, arg3, arg4); id r = _logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$(self, _cmd, arg1, arg2, arg3, arg4); return r; }
static id _logos_meta_method$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, bool* arg2, id* arg3) { HBLogDebug(@"+[<MCMContainer: %p> temporaryContainerWithIdentifier:%@ existed:%p error:%p]", self, arg1, arg2, arg3); id r = _logos_meta_orig$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$(self, _cmd, arg1, arg2, arg3); return r; }
static void _logos_method$_ungrouped$MCMContainer$_errorOccurred(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> _errorOccurred]", self); _logos_orig$_ungrouped$MCMContainer$_errorOccurred(self, _cmd); }
static long long _logos_method$_ungrouped$MCMContainer$_getContainerClass(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> _getContainerClass]", self); long long r = _logos_orig$_ungrouped$MCMContainer$_getContainerClass(self, _cmd); return r; }

static void _logos_method$_ungrouped$MCMContainer$dealloc(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> dealloc]", self); _logos_orig$_ungrouped$MCMContainer$dealloc(self, _cmd); }
static id _logos_method$_ungrouped$MCMContainer$description(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> description]", self); id r = _logos_orig$_ungrouped$MCMContainer$description(self, _cmd); return r; }
static id _logos_method$_ungrouped$MCMContainer$destroyContainerWithCompletion$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id  arg1) { HBLogDebug(@"-[<MCMContainer: %p> destroyContainerWithCompletion:%@]", self, arg1); id r = _logos_orig$_ungrouped$MCMContainer$destroyContainerWithCompletion$(self, _cmd, arg1); return r; }
static unsigned long long _logos_method$_ungrouped$MCMContainer$diskUsageWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id* arg1) { HBLogDebug(@"-[<MCMContainer: %p> diskUsageWithError:%p]", self, arg1); unsigned long long r = _logos_orig$_ungrouped$MCMContainer$diskUsageWithError$(self, _cmd, arg1); return r; }
static unsigned long long _logos_method$_ungrouped$MCMContainer$hash(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> hash]", self); unsigned long long r = _logos_orig$_ungrouped$MCMContainer$hash(self, _cmd); return r; }
static id _logos_method$_ungrouped$MCMContainer$infoValueForKey$error$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id* arg2) { HBLogDebug(@"-[<MCMContainer: %p> infoValueForKey:%@ error:%p]", self, arg1, arg2); id r = _logos_orig$_ungrouped$MCMContainer$infoValueForKey$error$(self, _cmd, arg1, arg2); return r; }
static MCMContainer* _logos_method$_ungrouped$MCMContainer$init(_LOGOS_SELF_TYPE_INIT MCMContainer* __unused self, SEL __unused _cmd) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<MCMContainer: %p> init]", self); id r = _logos_orig$_ungrouped$MCMContainer$init(self, _cmd); return r; }
static MCMContainer* _logos_method$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$(_LOGOS_SELF_TYPE_INIT MCMContainer* __unused self, SEL __unused _cmd, id arg1, bool arg2, bool* arg3, bool arg4, id* arg5) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<MCMContainer: %p> initWithIdentifier:%@ createIfNecessary:%d existed:%p temp:%d error:%p]", self, arg1, arg2, arg3, arg4, arg5); id r = _logos_orig$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$(self, _cmd, arg1, arg2, arg3, arg4, arg5); return r; }
static MCMContainer* _logos_method$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$(_LOGOS_SELF_TYPE_INIT MCMContainer* __unused self, SEL __unused _cmd, id arg1, unsigned int arg2, id arg3, long long arg4, id* arg5) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<MCMContainer: %p> initWithIdentifier:%@ userId:%u uuid:%@ containerClass:%lld error:%p]", self, arg1, arg2, arg3, arg4, arg5); id r = _logos_orig$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$(self, _cmd, arg1, arg2, arg3, arg4, arg5); return r; }
static bool _logos_method$_ungrouped$MCMContainer$isEqual$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"-[<MCMContainer: %p> isEqual:%@]", self, arg1); bool r = _logos_orig$_ungrouped$MCMContainer$isEqual$(self, _cmd, arg1); return r; }
static void _logos_method$_ungrouped$MCMContainer$markDeleted(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<MCMContainer: %p> markDeleted]", self); _logos_orig$_ungrouped$MCMContainer$markDeleted(self, _cmd); }
static bool _logos_method$_ungrouped$MCMContainer$recreateDefaultStructureWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id* arg1) { HBLogDebug(@"-[<MCMContainer: %p> recreateDefaultStructureWithError:%p]", self, arg1); bool r = _logos_orig$_ungrouped$MCMContainer$recreateDefaultStructureWithError$(self, _cmd, arg1); return r; }
static bool _logos_method$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id* arg1) { HBLogDebug(@"-[<MCMContainer: %p> regenerateDirectoryUUIDWithError:%p]", self, arg1); bool r = _logos_orig$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$(self, _cmd, arg1); return r; }
static bool _logos_method$_ungrouped$MCMContainer$setInfoValue$forKey$error$(_LOGOS_SELF_TYPE_NORMAL MCMContainer* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id* arg3) { HBLogDebug(@"-[<MCMContainer: %p> setInfoValue:%@ forKey:%@ error:%p]", self, arg1, arg2, arg3); bool r = _logos_orig$_ungrouped$MCMContainer$setInfoValue$forKey$error$(self, _cmd, arg1, arg2, arg3); return r; }



static __attribute__((constructor)) void _logosLocalInit() {
{Class _logos_class$_ungrouped$MCMContainer = objc_getClass("MCMContainer"); Class _logos_metaclass$_ungrouped$MCMContainer = object_getClass(_logos_class$_ungrouped$MCMContainer); MSHookMessageEx(_logos_metaclass$_ungrouped$MCMContainer, @selector(containerWithIdentifier:error:), (IMP)&_logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$error$, (IMP*)&_logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$error$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(containerClass), (IMP)&_logos_method$_ungrouped$MCMContainer$containerClass, (IMP*)&_logos_orig$_ungrouped$MCMContainer$containerClass);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(identifier), (IMP)&_logos_method$_ungrouped$MCMContainer$identifier, (IMP*)&_logos_orig$_ungrouped$MCMContainer$identifier);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(info), (IMP)&_logos_method$_ungrouped$MCMContainer$info, (IMP*)&_logos_orig$_ungrouped$MCMContainer$info);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(isTemporary), (IMP)&_logos_method$_ungrouped$MCMContainer$isTemporary, (IMP*)&_logos_orig$_ungrouped$MCMContainer$isTemporary);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(url), (IMP)&_logos_method$_ungrouped$MCMContainer$url, (IMP*)&_logos_orig$_ungrouped$MCMContainer$url);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(uuid), (IMP)&_logos_method$_ungrouped$MCMContainer$uuid, (IMP*)&_logos_orig$_ungrouped$MCMContainer$uuid);MSHookMessageEx(_logos_metaclass$_ungrouped$MCMContainer, @selector(containerWithIdentifier:createIfNecessary:existed:error:), (IMP)&_logos_meta_method$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$, (IMP*)&_logos_meta_orig$_ungrouped$MCMContainer$containerWithIdentifier$createIfNecessary$existed$error$);MSHookMessageEx(_logos_metaclass$_ungrouped$MCMContainer, @selector(temporaryContainerWithIdentifier:existed:error:), (IMP)&_logos_meta_method$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$, (IMP*)&_logos_meta_orig$_ungrouped$MCMContainer$temporaryContainerWithIdentifier$existed$error$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(_errorOccurred), (IMP)&_logos_method$_ungrouped$MCMContainer$_errorOccurred, (IMP*)&_logos_orig$_ungrouped$MCMContainer$_errorOccurred);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(_getContainerClass), (IMP)&_logos_method$_ungrouped$MCMContainer$_getContainerClass, (IMP*)&_logos_orig$_ungrouped$MCMContainer$_getContainerClass);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, sel_registerName("dealloc"), (IMP)&_logos_method$_ungrouped$MCMContainer$dealloc, (IMP*)&_logos_orig$_ungrouped$MCMContainer$dealloc);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(description), (IMP)&_logos_method$_ungrouped$MCMContainer$description, (IMP*)&_logos_orig$_ungrouped$MCMContainer$description);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(destroyContainerWithCompletion:), (IMP)&_logos_method$_ungrouped$MCMContainer$destroyContainerWithCompletion$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$destroyContainerWithCompletion$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(diskUsageWithError:), (IMP)&_logos_method$_ungrouped$MCMContainer$diskUsageWithError$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$diskUsageWithError$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(hash), (IMP)&_logos_method$_ungrouped$MCMContainer$hash, (IMP*)&_logos_orig$_ungrouped$MCMContainer$hash);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(infoValueForKey:error:), (IMP)&_logos_method$_ungrouped$MCMContainer$infoValueForKey$error$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$infoValueForKey$error$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(init), (IMP)&_logos_method$_ungrouped$MCMContainer$init, (IMP*)&_logos_orig$_ungrouped$MCMContainer$init);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(initWithIdentifier:createIfNecessary:existed:temp:error:), (IMP)&_logos_method$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$initWithIdentifier$createIfNecessary$existed$temp$error$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(initWithIdentifier:userId:uuid:containerClass:error:), (IMP)&_logos_method$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$initWithIdentifier$userId$uuid$containerClass$error$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(isEqual:), (IMP)&_logos_method$_ungrouped$MCMContainer$isEqual$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$isEqual$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(markDeleted), (IMP)&_logos_method$_ungrouped$MCMContainer$markDeleted, (IMP*)&_logos_orig$_ungrouped$MCMContainer$markDeleted);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(recreateDefaultStructureWithError:), (IMP)&_logos_method$_ungrouped$MCMContainer$recreateDefaultStructureWithError$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$recreateDefaultStructureWithError$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(regenerateDirectoryUUIDWithError:), (IMP)&_logos_method$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$regenerateDirectoryUUIDWithError$);MSHookMessageEx(_logos_class$_ungrouped$MCMContainer, @selector(setInfoValue:forKey:error:), (IMP)&_logos_method$_ungrouped$MCMContainer$setInfoValue$forKey$error$, (IMP*)&_logos_orig$_ungrouped$MCMContainer$setInfoValue$forKey$error$);} }
#line 41 "/Users/liangze/Documents/Desktop/pojieAPPS/Qianka/QiankaDylib/CCTweakTool/privateApis/__MCMContainer.xm"
