#line 1 "/Users/liangze/Documents/Desktop/pojieAPPS/Zhibo/ZhiboDylib/Logos/ZhiboDylib.xm"


#import <UIKit/UIKit.h>
#import "CCHelpTool.h"
@class CBFPrivateCheckView;



@interface UserModel : NSObject
+ (void)getUserInfoWithUserID:(id)arg1 Completion:(id)arg2;
@property(retain, nonatomic) NSDictionary *limitDic; 
@property(nonatomic) _Bool is_legend; 
@property(nonatomic) _Bool is_single_conversation; 
@property(copy, nonatomic) NSString *im_app_key; 
@property(copy, nonatomic) NSString *pull_url; 
@property(copy, nonatomic) NSString *drawer_id; 
@property(copy, nonatomic) NSString *gameType; 
@property(copy, nonatomic) NSString *wxunionid; 
@property(copy, nonatomic) NSString *approveid; 
@property(copy, nonatomic) NSString *province; 
@property(copy, nonatomic) NSString *professional; 
@property(nonatomic) _Bool toy_status; 
@property(copy, nonatomic) NSString *isHit; 
@property(copy, nonatomic) NSString *emotion; 
@property(copy, nonatomic) NSString *birthday; 
@property(copy, nonatomic) NSString *playBackCount; 
@property(copy, nonatomic) NSString *level; 
@property(nonatomic) _Bool attention; 
@property(nonatomic) double spendcoin; 
@property(copy, nonatomic) NSString *followees_cnt; 
@property(copy, nonatomic) NSString *followers_cnt; 
@property(copy, nonatomic) NSString *avatar; 
@property(retain, nonatomic) NSArray *contribute; 
@property(copy, nonatomic) NSString *name_card; 
@property(nonatomic) double anchorBalance; 
@property(nonatomic) double chipbalance; 
@property(nonatomic) double beanorignal; 
@property(nonatomic) double beanbalance; 
@property(nonatomic) double coinbalance; 
@property(copy, nonatomic) NSString *peerage_id; 
@property(copy, nonatomic) NSString *broadcasting; 
@property(copy, nonatomic) NSString *vip; 
@property(copy, nonatomic) NSString *curroomnum; 
@property(copy, nonatomic) NSString *snap; 
@property(copy, nonatomic) NSString *city; 
@property(copy, nonatomic) NSString *username; 
@property(copy, nonatomic) NSString *nickname; 
@property(copy, nonatomic) NSString *intro; 
@property(copy, nonatomic) NSString *sex; 
@property(nonatomic) _Bool isFriend; 


@end


typedef NS_ENUM(NSUInteger, AFSSLPinningMode) {
    AFSSLPinningModeNone,
    AFSSLPinningModePublicKey,
    AFSSLPinningModeCertificate,
};
@interface AFSecurityPolicy : NSObject

@property (nonatomic, strong, ) NSSet <NSData *> *pinnedCertificates;

@property (nonatomic, assign) BOOL allowInvalidCertificates;
@property (nonatomic, assign) BOOL validatesDomainName;
+ (NSSet <NSData *> *)certificatesInBundle:(NSBundle *)bundle;
+ (instancetype)defaultPolicy;
+ (instancetype)policyWithPinningMode:(AFSSLPinningMode)pinningMode;
+ (instancetype)policyWithPinningMode:(AFSSLPinningMode)pinningMode withPinnedCertificates:(NSSet <NSData *> *)pinnedCertificates;

- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust forDomain:( NSString *)domain;
@end



#include <substrate.h>
#if defined(__clang__)
#if __has_feature(objc_arc)
#define _LOGOS_SELF_TYPE_NORMAL __unsafe_unretained
#define _LOGOS_SELF_TYPE_INIT __attribute__((ns_consumed))
#define _LOGOS_SELF_CONST const
#define _LOGOS_RETURN_RETAINED __attribute__((ns_returns_retained))
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif

@class UIAlertController; @class AFSecurityPolicy; @class HTTPManager; @class CBFPrivateCheckView; @class LiveRoomGuard; @class HttpClient; @class EncryptionTools; @class MAudienceViewController; @class AFHTTPSessionManager; 
static AFSecurityPolicy* (*_logos_meta_orig$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, NSUInteger, NSSet *); static AFSecurityPolicy* _logos_meta_method$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, NSUInteger, NSSet *); static UIAlertController* (*_logos_meta_orig$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL,  NSString *,  NSString *, UIAlertControllerStyle); static UIAlertController* _logos_meta_method$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL,  NSString *,  NSString *, UIAlertControllerStyle); static void (*_logos_orig$_ungrouped$UIAlertController$addAction$)(_LOGOS_SELF_TYPE_NORMAL UIAlertController* _LOGOS_SELF_CONST, SEL, UIAlertAction *); static void _logos_method$_ungrouped$UIAlertController$addAction$(_LOGOS_SELF_TYPE_NORMAL UIAlertController* _LOGOS_SELF_CONST, SEL, UIAlertAction *); static MAudienceViewController* (*_logos_orig$_ungrouped$MAudienceViewController$initWithUserType$)(_LOGOS_SELF_TYPE_INIT MAudienceViewController*, SEL, unsigned long long) _LOGOS_RETURN_RETAINED; static MAudienceViewController* _logos_method$_ungrouped$MAudienceViewController$initWithUserType$(_LOGOS_SELF_TYPE_INIT MAudienceViewController*, SEL, unsigned long long) _LOGOS_RETURN_RETAINED; static CBFPrivateCheckView* (*_logos_orig$_ungrouped$CBFPrivateCheckView$init)(_LOGOS_SELF_TYPE_INIT CBFPrivateCheckView*, SEL) _LOGOS_RETURN_RETAINED; static CBFPrivateCheckView* _logos_method$_ungrouped$CBFPrivateCheckView$init(_LOGOS_SELF_TYPE_INIT CBFPrivateCheckView*, SEL) _LOGOS_RETURN_RETAINED; static void (*_logos_orig$_ungrouped$CBFPrivateCheckView$exitAction)(_LOGOS_SELF_TYPE_NORMAL CBFPrivateCheckView* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CBFPrivateCheckView$exitAction(_LOGOS_SELF_TYPE_NORMAL CBFPrivateCheckView* _LOGOS_SELF_CONST, SEL); static NSURLSessionDataTask * (*_logos_orig$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$)(_LOGOS_SELF_TYPE_NORMAL AFHTTPSessionManager* _LOGOS_SELF_CONST, SEL, NSString *, NSString *, id, void (^)(NSProgress *uploadProgress), void (^)(NSProgress *downloadProgress), void (^)(NSURLSessionDataTask *task, id responseObject), void (^)(NSURLSessionDataTask *task, NSError *error)); static NSURLSessionDataTask * _logos_method$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$(_LOGOS_SELF_TYPE_NORMAL AFHTTPSessionManager* _LOGOS_SELF_CONST, SEL, NSString *, NSString *, id, void (^)(NSProgress *uploadProgress), void (^)(NSProgress *downloadProgress), void (^)(NSURLSessionDataTask *task, id responseObject), void (^)(NSURLSessionDataTask *task, NSError *error)); static id (*_logos_meta_orig$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static id _logos_meta_method$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static id (*_logos_meta_orig$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static id _logos_meta_method$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static id (*_logos_meta_orig$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static id _logos_meta_method$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static id (*_logos_meta_orig$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static id _logos_meta_method$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id); static void (*_logos_meta_orig$_ungrouped$HTTPManager$getWithUrl$success$fail$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, NSString *, id, id); static void _logos_meta_method$_ungrouped$HTTPManager$getWithUrl$success$fail$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, NSString *, id, id); static void (*_logos_meta_orig$_ungrouped$HTTPManager$successCode$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static void _logos_meta_method$_ungrouped$HTTPManager$successCode$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static void (*_logos_meta_orig$_ungrouped$HTTPManager$handleError$failHander$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id); static void _logos_meta_method$_ungrouped$HTTPManager$handleError$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id); static void (*_logos_meta_orig$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static void _logos_meta_method$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static id (*_logos_meta_orig$_ungrouped$HTTPManager$appendParams$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static id _logos_meta_method$_ungrouped$HTTPManager$appendParams$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static id (*_logos_meta_orig$_ungrouped$HTTPManager$handleUrl$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static id _logos_meta_method$_ungrouped$HTTPManager$handleUrl$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id); static id (*_logos_meta_orig$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id, id); static id _logos_meta_method$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id, id); static id (*_logos_meta_orig$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static id _logos_meta_method$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, id, id, id); static HttpClient* (*_logos_orig$_ungrouped$HttpClient$init)(_LOGOS_SELF_TYPE_INIT HttpClient*, SEL) _LOGOS_RETURN_RETAINED; static HttpClient* _logos_method$_ungrouped$HttpClient$init(_LOGOS_SELF_TYPE_INIT HttpClient*, SEL) _LOGOS_RETURN_RETAINED; static void (*_logos_orig$_ungrouped$HttpClient$close)(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$HttpClient$close(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$HttpClient$httpclient_set_property_l$value$)(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, char *, char *); static void _logos_method$_ungrouped$HttpClient$httpclient_set_property_l$value$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, char *, char *); static void (*_logos_orig$_ungrouped$HttpClient$httpclient_set_opt_l$value$)(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, int, void *); static void _logos_method$_ungrouped$HttpClient$httpclient_set_opt_l$value$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, int, void *); static void (*_logos_orig$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$)(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, id, void *); static void _logos_method$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, id, void *); static int (*_logos_orig$_ungrouped$HttpClient$httpclient_send_request_l$)(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, id); static int _logos_method$_ungrouped$HttpClient$httpclient_send_request_l$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST, SEL, id); static id (*_logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, _Bool); static id _logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, _Bool); static id (*_logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$)(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, _Bool); static id _logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST, SEL, id, _Bool); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setAnimation$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static void _logos_method$_ungrouped$LiveRoomGuard$setAnimation$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static _Bool (*_logos_orig$_ungrouped$LiveRoomGuard$animation)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$LiveRoomGuard$animation(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setTryWatching$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static void _logos_method$_ungrouped$LiveRoomGuard$setTryWatching$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static _Bool (*_logos_orig$_ungrouped$LiveRoomGuard$tryWatching)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$LiveRoomGuard$tryWatching(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setWaperedBlock$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id ); static void _logos_method$_ungrouped$LiveRoomGuard$setWaperedBlock$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id ); static id (*_logos_orig$_ungrouped$LiveRoomGuard$waperedBlock)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$LiveRoomGuard$waperedBlock(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setPullUrl$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$LiveRoomGuard$setPullUrl$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$LiveRoomGuard$pullUrl)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$LiveRoomGuard$pullUrl(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setLimitDic$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSDictionary *); static void _logos_method$_ungrouped$LiveRoomGuard$setLimitDic$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSDictionary *); static NSDictionary * (*_logos_orig$_ungrouped$LiveRoomGuard$limitDic)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static NSDictionary * _logos_method$_ungrouped$LiveRoomGuard$limitDic(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setUserID$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$LiveRoomGuard$setUserID$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$LiveRoomGuard$userID)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$LiveRoomGuard$userID(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setModel$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, UserModel *); static void _logos_method$_ungrouped$LiveRoomGuard$setModel$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, UserModel *); static UserModel * (*_logos_orig$_ungrouped$LiveRoomGuard$model)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static UserModel * _logos_method$_ungrouped$LiveRoomGuard$model(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setPwdView$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, CBFPrivateCheckView *); static void _logos_method$_ungrouped$LiveRoomGuard$setPwdView$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, CBFPrivateCheckView *); static CBFPrivateCheckView * (*_logos_orig$_ungrouped$LiveRoomGuard$pwdView)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static CBFPrivateCheckView * _logos_method$_ungrouped$LiveRoomGuard$pwdView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setToController$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, MAudienceViewController *); static void _logos_method$_ungrouped$LiveRoomGuard$setToController$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, MAudienceViewController *); static MAudienceViewController * (*_logos_orig$_ungrouped$LiveRoomGuard$toController)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static MAudienceViewController * _logos_method$_ungrouped$LiveRoomGuard$toController(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id  ); static void _logos_method$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id  ); static id (*_logos_orig$_ungrouped$LiveRoomGuard$didPushToWatchVc)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$LiveRoomGuard$didPushToWatchVc(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static void _logos_method$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, _Bool ); static _Bool (*_logos_orig$_ungrouped$LiveRoomGuard$isAdminSendNamecard)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$LiveRoomGuard$isAdminSendNamecard(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$setRole$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$LiveRoomGuard$setRole$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$LiveRoomGuard$role)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$LiveRoomGuard$role(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkVideoMoney)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkVideoMoney(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkUserMoney)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkUserMoney(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkLevel)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkLevel(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkTicketReq)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkTicketReq(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkPassword$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$LiveRoomGuard$checkPassword$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkVideoPoint)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkVideoPoint(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkUserPoint)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$checkUserPoint(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$removePrivateView)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$removePrivateView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$previewPrivateRoom)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$previewPrivateRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$pushToShareVC)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$pushToShareVC(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$checkPrivate$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$LiveRoomGuard$checkPrivate$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$LiveRoomGuard$previewLiveRoom)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$previewLiveRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$showPrivateCheckView)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$showPrivateCheckView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$closeRoomWithAlert$)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$LiveRoomGuard$closeRoomWithAlert$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$LiveRoomGuard$pushToLiveRoom)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$pushToLiveRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$startLimitActionFlow)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$startLimitActionFlow(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static id (*_logos_orig$_ungrouped$LiveRoomGuard$getRoomType)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$LiveRoomGuard$getRoomType(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$fetchRoomData)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$fetchRoomData(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$LiveRoomGuard$bindLogic)(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$LiveRoomGuard$bindLogic(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST, SEL); 

#line 76 "/Users/liangze/Documents/Desktop/pojieAPPS/Zhibo/ZhiboDylib/Logos/ZhiboDylib.xm"

static AFSecurityPolicy* _logos_meta_method$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSUInteger pinningMode, NSSet * pinnedCertificates) {
    AFSecurityPolicy *securityPolicy = _logos_meta_orig$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$(self, _cmd, 0, pinnedCertificates);
    securityPolicy.allowInvalidCertificates = true;
    securityPolicy.validatesDomainName = false;
    return securityPolicy;
}







static UIAlertController* _logos_meta_method$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd,  NSString * title,  NSString * message, UIAlertControllerStyle preferredStyle){
    return _logos_meta_orig$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$(self, _cmd, title, message, preferredStyle);
}

static void _logos_method$_ungrouped$UIAlertController$addAction$(_LOGOS_SELF_TYPE_NORMAL UIAlertController* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, UIAlertAction * action){
    _logos_orig$_ungrouped$UIAlertController$addAction$(self, _cmd, action);
}







static MAudienceViewController* _logos_method$_ungrouped$MAudienceViewController$initWithUserType$(_LOGOS_SELF_TYPE_INIT MAudienceViewController* __unused self, SEL __unused _cmd, unsigned long long arg1) _LOGOS_RETURN_RETAINED{
    ;
    
    return _logos_orig$_ungrouped$MAudienceViewController$initWithUserType$(self, _cmd, arg1);
}




static CBFPrivateCheckView* _logos_method$_ungrouped$CBFPrivateCheckView$init(_LOGOS_SELF_TYPE_INIT CBFPrivateCheckView* __unused self, SEL __unused _cmd) _LOGOS_RETURN_RETAINED{



    ;
    return _logos_orig$_ungrouped$CBFPrivateCheckView$init(self, _cmd);
}
static void _logos_method$_ungrouped$CBFPrivateCheckView$exitAction(_LOGOS_SELF_TYPE_NORMAL CBFPrivateCheckView* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd){
    UIViewController *r = (UIViewController *)self;
    [r dismissViewControllerAnimated:true completion:nil];
    [r.view removeFromSuperview];
    [r removeFromParentViewController];
}

















static NSURLSessionDataTask * _logos_method$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$(_LOGOS_SELF_TYPE_NORMAL AFHTTPSessionManager* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSString * method, NSString * URLString, id parameters, void (^uploadProgress)(NSProgress *uploadProgress), void (^downloadProgress)(NSProgress *downloadProgress), void (^success)(NSURLSessionDataTask *task, id responseObject), void (^failure)(NSURLSessionDataTask *task, NSError *error)){
    
    void (^new_success)(NSURLSessionDataTask *task, id responseObject) = ^(NSURLSessionDataTask *task, id responseObject){
        id obj = [NSJSONSerialization JSONObjectWithData:responseObject options:0 error:nil];
        NSLog(@"========>发起的请求是 %@\n响应是:%@",task.currentRequest.URL.absoluteString, obj);
        success(task, responseObject);
    };
    
    void (^new_failure)(NSURLSessionDataTask *task, NSError *error) = ^(NSURLSessionDataTask *task, NSError *error){
        NSLog(@"========>发起的请求是，失败了: %@", task.currentRequest.URL.absoluteString);
        failure(task, error);
    };
    NSURLSessionDataTask *task = _logos_orig$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$(self, _cmd, method, URLString, parameters, uploadProgress, downloadProgress, new_success, new_failure);
    return task;
}




static id _logos_meta_method$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3) { HBLogDebug(@"+[<EncryptionTools: %p> desDecryptString:%@ keyString:%@ iv:%@]", self, arg1, arg2, arg3); id r = _logos_meta_orig$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$(self, _cmd, arg1, arg2, arg3); return r; }
static id _logos_meta_method$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3) { HBLogDebug(@"+[<EncryptionTools: %p> desEncryptString:%@ keyString:%@ iv:%@]", self, arg1, arg2, arg3); id r = _logos_meta_orig$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$(self, _cmd, arg1, arg2, arg3); return r; }
static id _logos_meta_method$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3, id arg4) { HBLogDebug(@"+[<EncryptionTools: %p> aesDecryptString:%@ keyString:%@ iv:%@ decryptDataAddtionHandle:%@]", self, arg1, arg2, arg3, arg4); id r = _logos_meta_orig$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$(self, _cmd, arg1, arg2, arg3, arg4); return r; }
static id _logos_meta_method$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3) { HBLogDebug(@"+[<EncryptionTools: %p> aesEncryptString:%@ keyString:%@ iv:%@]", self, arg1, arg2, arg3); id r = _logos_meta_orig$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$(self, _cmd, arg1, arg2, arg3); return r; }



static void _logos_meta_method$_ungrouped$HTTPManager$getWithUrl$success$fail$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSString * path, id arg2, id arg3) {



    
    HBLogDebug(@"+[<HTTPManager: %p> getWithUrl:%@ success:%@ fail:%@]", self, path, arg2, arg3);
    if ([path isEqualToString:@"/private/getPrivateLimit"]){
        NSLog(@"");
    }
    _logos_meta_orig$_ungrouped$HTTPManager$getWithUrl$success$fail$(self, _cmd, path, arg2, arg3);
}
static void _logos_meta_method$_ungrouped$HTTPManager$successCode$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"+[<HTTPManager: %p> successCode:%@]", self, arg1); _logos_meta_orig$_ungrouped$HTTPManager$successCode$(self, _cmd, arg1); }
static void _logos_meta_method$_ungrouped$HTTPManager$handleError$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2) { HBLogDebug(@"+[<HTTPManager: %p> handleError:%@ failHander:%@]", self, arg1, arg2); _logos_meta_orig$_ungrouped$HTTPManager$handleError$failHander$(self, _cmd, arg1, arg2); }
static void _logos_meta_method$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3, id arg4) { HBLogDebug(@"+[<HTTPManager: %p> handleSuccessWithTask:%@ responseObject:%@ successHander:%@ failHander:%@]", self, arg1, arg2, arg3, arg4); _logos_meta_orig$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$(self, _cmd, arg1, arg2, arg3, arg4); }
static id _logos_meta_method$_ungrouped$HTTPManager$appendParams$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"+[<HTTPManager: %p> appendParams:%@]", self, arg1); id r = _logos_meta_orig$_ungrouped$HTTPManager$appendParams$(self, _cmd, arg1); return r; }
static id _logos_meta_method$_ungrouped$HTTPManager$handleUrl$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"+[<HTTPManager: %p> handleUrl:%@]", self, arg1); id r = _logos_meta_orig$_ungrouped$HTTPManager$handleUrl$(self, _cmd, arg1); return r; }
static id _logos_meta_method$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3, id arg4, id arg5) { HBLogDebug(@"+[<HTTPManager: %p> UploadWithUrl:%@ Params:%@ uploadData:%@ successHander:%@ failHander:%@]", self, arg1, arg2, arg3, arg4, arg5); id r = _logos_meta_orig$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$(self, _cmd, arg1, arg2, arg3, arg4, arg5); return r; }
static id _logos_meta_method$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, id arg2, id arg3, id arg4) { HBLogDebug(@"+[<HTTPManager: %p> PostWithUrl:%@ Params:%@ successHander:%@ failHander:%@]", self, arg1, arg2, arg3, arg4); id r = _logos_meta_orig$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$(self, _cmd, arg1, arg2, arg3, arg4); return r; }












static HttpClient* _logos_method$_ungrouped$HttpClient$init(_LOGOS_SELF_TYPE_INIT HttpClient* __unused self, SEL __unused _cmd) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<HttpClient: %p> init]", self); id r = _logos_orig$_ungrouped$HttpClient$init(self, _cmd); return r; }
static void _logos_method$_ungrouped$HttpClient$close(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<HttpClient: %p> close]", self); _logos_orig$_ungrouped$HttpClient$close(self, _cmd); }
static void _logos_method$_ungrouped$HttpClient$httpclient_set_property_l$value$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, char * arg1, char * arg2) { HBLogDebug(@"-[<HttpClient: %p> httpclient_set_property_l:%s value:%s]", self, arg1, arg2); _logos_orig$_ungrouped$HttpClient$httpclient_set_property_l$value$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$HttpClient$httpclient_set_opt_l$value$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, int arg1, void * arg2) { HBLogDebug(@"-[<HttpClient: %p> httpclient_set_opt_l:%d value:%p]", self, arg1, arg2); _logos_orig$_ungrouped$HttpClient$httpclient_set_opt_l$value$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, void * arg2) { HBLogDebug(@"-[<HttpClient: %p> httpclient_set_callback_l:%@ cb_handle:%p]", self, arg1, arg2); _logos_orig$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$(self, _cmd, arg1, arg2); }
static int _logos_method$_ungrouped$HttpClient$httpclient_send_request_l$(_LOGOS_SELF_TYPE_NORMAL HttpClient* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"-[<HttpClient: %p> httpclient_send_request_l:%@]", self, arg1); int r = _logos_orig$_ungrouped$HttpClient$httpclient_send_request_l$(self, _cmd, arg1); return r; }





static id _logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, _Bool arg2) { HBLogDebug(@"+[<LiveRoomGuard: %p> startRoomRouteFlowWithUserModel:%@ animation:%d]", self, arg1, arg2); id r = _logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$(self, _cmd, arg1, arg2); return r; }
static id _logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$(_LOGOS_SELF_TYPE_NORMAL Class _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1, _Bool arg2) { HBLogDebug(@"+[<LiveRoomGuard: %p> startRoomRouteFlowWithUserID:%@ animation:%d]", self, arg1, arg2); id r = _logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$(self, _cmd, arg1, arg2); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setAnimation$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, _Bool  animation) { HBLogDebug(@"-[<LiveRoomGuard: %p> setAnimation:%d]", self, animation); _logos_orig$_ungrouped$LiveRoomGuard$setAnimation$(self, _cmd, animation); }
static _Bool _logos_method$_ungrouped$LiveRoomGuard$animation(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> animation]", self); _Bool  r = _logos_orig$_ungrouped$LiveRoomGuard$animation(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setTryWatching$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, _Bool  tryWatching) { HBLogDebug(@"-[<LiveRoomGuard: %p> setTryWatching:%d]", self, tryWatching); _logos_orig$_ungrouped$LiveRoomGuard$setTryWatching$(self, _cmd, tryWatching); }
static _Bool _logos_method$_ungrouped$LiveRoomGuard$tryWatching(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> tryWatching]", self); _Bool  r = _logos_orig$_ungrouped$LiveRoomGuard$tryWatching(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setWaperedBlock$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id  waperedBlock) { HBLogDebug(@"-[<LiveRoomGuard: %p> setWaperedBlock:%@]", self, waperedBlock); _logos_orig$_ungrouped$LiveRoomGuard$setWaperedBlock$(self, _cmd, waperedBlock); }
static id _logos_method$_ungrouped$LiveRoomGuard$waperedBlock(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> waperedBlock]", self); id  r = _logos_orig$_ungrouped$LiveRoomGuard$waperedBlock(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setPullUrl$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSString * pullUrl) { HBLogDebug(@"-[<LiveRoomGuard: %p> setPullUrl:%@]", self, pullUrl); _logos_orig$_ungrouped$LiveRoomGuard$setPullUrl$(self, _cmd, pullUrl); }
static NSString * _logos_method$_ungrouped$LiveRoomGuard$pullUrl(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pullUrl]", self); NSString * r = _logos_orig$_ungrouped$LiveRoomGuard$pullUrl(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setLimitDic$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSDictionary * limitDic) { HBLogDebug(@"-[<LiveRoomGuard: %p> setLimitDic:%@]", self, limitDic); _logos_orig$_ungrouped$LiveRoomGuard$setLimitDic$(self, _cmd, limitDic); }
static NSDictionary * _logos_method$_ungrouped$LiveRoomGuard$limitDic(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> limitDic]", self); NSDictionary * r = _logos_orig$_ungrouped$LiveRoomGuard$limitDic(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setUserID$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSString * userID) { HBLogDebug(@"-[<LiveRoomGuard: %p> setUserID:%@]", self, userID); _logos_orig$_ungrouped$LiveRoomGuard$setUserID$(self, _cmd, userID); }
static NSString * _logos_method$_ungrouped$LiveRoomGuard$userID(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> userID]", self); NSString * r = _logos_orig$_ungrouped$LiveRoomGuard$userID(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setModel$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, UserModel * model) { HBLogDebug(@"-[<LiveRoomGuard: %p> setModel:%@]", self, model); _logos_orig$_ungrouped$LiveRoomGuard$setModel$(self, _cmd, model); }
static UserModel * _logos_method$_ungrouped$LiveRoomGuard$model(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> model]", self); UserModel * r = _logos_orig$_ungrouped$LiveRoomGuard$model(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setPwdView$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, CBFPrivateCheckView * pwdView) { HBLogDebug(@"-[<LiveRoomGuard: %p> setPwdView:%@]", self, pwdView); _logos_orig$_ungrouped$LiveRoomGuard$setPwdView$(self, _cmd, pwdView); }
static CBFPrivateCheckView * _logos_method$_ungrouped$LiveRoomGuard$pwdView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pwdView]", self); CBFPrivateCheckView * r = _logos_orig$_ungrouped$LiveRoomGuard$pwdView(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setToController$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, MAudienceViewController * toController) { HBLogDebug(@"-[<LiveRoomGuard: %p> setToController:%@]", self, toController); _logos_orig$_ungrouped$LiveRoomGuard$setToController$(self, _cmd, toController); }
static MAudienceViewController * _logos_method$_ungrouped$LiveRoomGuard$toController(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> toController]", self); MAudienceViewController * r = _logos_orig$_ungrouped$LiveRoomGuard$toController(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id   didPushToWatchVc) { HBLogDebug(@"-[<LiveRoomGuard: %p> setDidPushToWatchVc:%@]", self, didPushToWatchVc); _logos_orig$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$(self, _cmd, didPushToWatchVc); }
static id _logos_method$_ungrouped$LiveRoomGuard$didPushToWatchVc(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> didPushToWatchVc]", self); id   r = _logos_orig$_ungrouped$LiveRoomGuard$didPushToWatchVc(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, _Bool  isAdminSendNamecard) { HBLogDebug(@"-[<LiveRoomGuard: %p> setIsAdminSendNamecard:%d]", self, isAdminSendNamecard); _logos_orig$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$(self, _cmd, isAdminSendNamecard); }
static _Bool _logos_method$_ungrouped$LiveRoomGuard$isAdminSendNamecard(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> isAdminSendNamecard]", self); _Bool  r = _logos_orig$_ungrouped$LiveRoomGuard$isAdminSendNamecard(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$setRole$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, NSString * role) { HBLogDebug(@"-[<LiveRoomGuard: %p> setRole:%@]", self, role); _logos_orig$_ungrouped$LiveRoomGuard$setRole$(self, _cmd, role); }
static NSString * _logos_method$_ungrouped$LiveRoomGuard$role(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> role]", self); NSString * r = _logos_orig$_ungrouped$LiveRoomGuard$role(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$checkVideoMoney(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkVideoMoney]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkVideoMoney(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkUserMoney(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkUserMoney]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkUserMoney(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkLevel(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkLevel]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkLevel(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkTicketReq(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkTicketReq]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkTicketReq(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkPassword$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkPassword:%@]", self, arg1); _logos_orig$_ungrouped$LiveRoomGuard$checkPassword$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkVideoPoint(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkVideoPoint]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkVideoPoint(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkUserPoint(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkUserPoint]", self); _logos_orig$_ungrouped$LiveRoomGuard$checkUserPoint(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$removePrivateView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> removePrivateView]", self); _logos_orig$_ungrouped$LiveRoomGuard$removePrivateView(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pulishToPreViewTimeRoom]", self); _logos_orig$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$previewPrivateRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> previewPrivateRoom]", self); _logos_orig$_ungrouped$LiveRoomGuard$previewPrivateRoom(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pushAnchorBalanceVC]", self); _logos_orig$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$pushToShareVC(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pushToShareVC]", self); _logos_orig$_ungrouped$LiveRoomGuard$pushToShareVC(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$checkPrivate$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"-[<LiveRoomGuard: %p> checkPrivate:%@]", self, arg1); _logos_orig$_ungrouped$LiveRoomGuard$checkPrivate$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$LiveRoomGuard$previewLiveRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> previewLiveRoom]", self); _logos_orig$_ungrouped$LiveRoomGuard$previewLiveRoom(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$showPrivateCheckView(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> showPrivateCheckView]", self); _logos_orig$_ungrouped$LiveRoomGuard$showPrivateCheckView(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$closeRoomWithAlert$(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd, id arg1) { HBLogDebug(@"-[<LiveRoomGuard: %p> closeRoomWithAlert:%@]", self, arg1); _logos_orig$_ungrouped$LiveRoomGuard$closeRoomWithAlert$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$LiveRoomGuard$pushToLiveRoom(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> pushToLiveRoom]", self); _logos_orig$_ungrouped$LiveRoomGuard$pushToLiveRoom(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$startLimitActionFlow(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> startLimitActionFlow]", self); _logos_orig$_ungrouped$LiveRoomGuard$startLimitActionFlow(self, _cmd); }
static id _logos_method$_ungrouped$LiveRoomGuard$getRoomType(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> getRoomType]", self); id r = _logos_orig$_ungrouped$LiveRoomGuard$getRoomType(self, _cmd); return r; }
static void _logos_method$_ungrouped$LiveRoomGuard$fetchRoomData(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> fetchRoomData]", self); _logos_orig$_ungrouped$LiveRoomGuard$fetchRoomData(self, _cmd); }
static void _logos_method$_ungrouped$LiveRoomGuard$bindLogic(_LOGOS_SELF_TYPE_NORMAL LiveRoomGuard* _LOGOS_SELF_CONST __unused self, SEL __unused _cmd) { HBLogDebug(@"-[<LiveRoomGuard: %p> bindLogic]", self); _logos_orig$_ungrouped$LiveRoomGuard$bindLogic(self, _cmd); }

static __attribute__((constructor)) void _logosLocalInit() {
{Class _logos_class$_ungrouped$AFSecurityPolicy = objc_getClass("AFSecurityPolicy"); Class _logos_metaclass$_ungrouped$AFSecurityPolicy = object_getClass(_logos_class$_ungrouped$AFSecurityPolicy); MSHookMessageEx(_logos_metaclass$_ungrouped$AFSecurityPolicy, @selector(policyWithPinningMode:withPinnedCertificates:), (IMP)&_logos_meta_method$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$, (IMP*)&_logos_meta_orig$_ungrouped$AFSecurityPolicy$policyWithPinningMode$withPinnedCertificates$);Class _logos_class$_ungrouped$UIAlertController = objc_getClass("UIAlertController"); Class _logos_metaclass$_ungrouped$UIAlertController = object_getClass(_logos_class$_ungrouped$UIAlertController); MSHookMessageEx(_logos_metaclass$_ungrouped$UIAlertController, @selector(alertControllerWithTitle:message:preferredStyle:), (IMP)&_logos_meta_method$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$, (IMP*)&_logos_meta_orig$_ungrouped$UIAlertController$alertControllerWithTitle$message$preferredStyle$);MSHookMessageEx(_logos_class$_ungrouped$UIAlertController, @selector(addAction:), (IMP)&_logos_method$_ungrouped$UIAlertController$addAction$, (IMP*)&_logos_orig$_ungrouped$UIAlertController$addAction$);Class _logos_class$_ungrouped$MAudienceViewController = objc_getClass("MAudienceViewController"); MSHookMessageEx(_logos_class$_ungrouped$MAudienceViewController, @selector(initWithUserType:), (IMP)&_logos_method$_ungrouped$MAudienceViewController$initWithUserType$, (IMP*)&_logos_orig$_ungrouped$MAudienceViewController$initWithUserType$);Class _logos_class$_ungrouped$CBFPrivateCheckView = objc_getClass("CBFPrivateCheckView"); MSHookMessageEx(_logos_class$_ungrouped$CBFPrivateCheckView, @selector(init), (IMP)&_logos_method$_ungrouped$CBFPrivateCheckView$init, (IMP*)&_logos_orig$_ungrouped$CBFPrivateCheckView$init);MSHookMessageEx(_logos_class$_ungrouped$CBFPrivateCheckView, @selector(exitAction), (IMP)&_logos_method$_ungrouped$CBFPrivateCheckView$exitAction, (IMP*)&_logos_orig$_ungrouped$CBFPrivateCheckView$exitAction);Class _logos_class$_ungrouped$AFHTTPSessionManager = objc_getClass("AFHTTPSessionManager"); MSHookMessageEx(_logos_class$_ungrouped$AFHTTPSessionManager, @selector(dataTaskWithHTTPMethod:URLString:parameters:uploadProgress:downloadProgress:success:failure:), (IMP)&_logos_method$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$, (IMP*)&_logos_orig$_ungrouped$AFHTTPSessionManager$dataTaskWithHTTPMethod$URLString$parameters$uploadProgress$downloadProgress$success$failure$);Class _logos_class$_ungrouped$EncryptionTools = objc_getClass("EncryptionTools"); Class _logos_metaclass$_ungrouped$EncryptionTools = object_getClass(_logos_class$_ungrouped$EncryptionTools); MSHookMessageEx(_logos_metaclass$_ungrouped$EncryptionTools, @selector(desDecryptString:keyString:iv:), (IMP)&_logos_meta_method$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$, (IMP*)&_logos_meta_orig$_ungrouped$EncryptionTools$desDecryptString$keyString$iv$);MSHookMessageEx(_logos_metaclass$_ungrouped$EncryptionTools, @selector(desEncryptString:keyString:iv:), (IMP)&_logos_meta_method$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$, (IMP*)&_logos_meta_orig$_ungrouped$EncryptionTools$desEncryptString$keyString$iv$);MSHookMessageEx(_logos_metaclass$_ungrouped$EncryptionTools, @selector(aesDecryptString:keyString:iv:decryptDataAddtionHandle:), (IMP)&_logos_meta_method$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$, (IMP*)&_logos_meta_orig$_ungrouped$EncryptionTools$aesDecryptString$keyString$iv$decryptDataAddtionHandle$);MSHookMessageEx(_logos_metaclass$_ungrouped$EncryptionTools, @selector(aesEncryptString:keyString:iv:), (IMP)&_logos_meta_method$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$, (IMP*)&_logos_meta_orig$_ungrouped$EncryptionTools$aesEncryptString$keyString$iv$);Class _logos_class$_ungrouped$HTTPManager = objc_getClass("HTTPManager"); Class _logos_metaclass$_ungrouped$HTTPManager = object_getClass(_logos_class$_ungrouped$HTTPManager); MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(getWithUrl:success:fail:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$getWithUrl$success$fail$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$getWithUrl$success$fail$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(successCode:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$successCode$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$successCode$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(handleError:failHander:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$handleError$failHander$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$handleError$failHander$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(handleSuccessWithTask:responseObject:successHander:failHander:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$handleSuccessWithTask$responseObject$successHander$failHander$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(appendParams:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$appendParams$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$appendParams$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(handleUrl:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$handleUrl$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$handleUrl$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(UploadWithUrl:Params:uploadData:successHander:failHander:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$UploadWithUrl$Params$uploadData$successHander$failHander$);MSHookMessageEx(_logos_metaclass$_ungrouped$HTTPManager, @selector(PostWithUrl:Params:successHander:failHander:), (IMP)&_logos_meta_method$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$, (IMP*)&_logos_meta_orig$_ungrouped$HTTPManager$PostWithUrl$Params$successHander$failHander$);Class _logos_class$_ungrouped$HttpClient = objc_getClass("HttpClient"); MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(init), (IMP)&_logos_method$_ungrouped$HttpClient$init, (IMP*)&_logos_orig$_ungrouped$HttpClient$init);MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(close), (IMP)&_logos_method$_ungrouped$HttpClient$close, (IMP*)&_logos_orig$_ungrouped$HttpClient$close);MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(httpclient_set_property_l:value:), (IMP)&_logos_method$_ungrouped$HttpClient$httpclient_set_property_l$value$, (IMP*)&_logos_orig$_ungrouped$HttpClient$httpclient_set_property_l$value$);MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(httpclient_set_opt_l:value:), (IMP)&_logos_method$_ungrouped$HttpClient$httpclient_set_opt_l$value$, (IMP*)&_logos_orig$_ungrouped$HttpClient$httpclient_set_opt_l$value$);MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(httpclient_set_callback_l:cb_handle:), (IMP)&_logos_method$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$, (IMP*)&_logos_orig$_ungrouped$HttpClient$httpclient_set_callback_l$cb_handle$);MSHookMessageEx(_logos_class$_ungrouped$HttpClient, @selector(httpclient_send_request_l:), (IMP)&_logos_method$_ungrouped$HttpClient$httpclient_send_request_l$, (IMP*)&_logos_orig$_ungrouped$HttpClient$httpclient_send_request_l$);Class _logos_class$_ungrouped$LiveRoomGuard = objc_getClass("LiveRoomGuard"); Class _logos_metaclass$_ungrouped$LiveRoomGuard = object_getClass(_logos_class$_ungrouped$LiveRoomGuard); MSHookMessageEx(_logos_metaclass$_ungrouped$LiveRoomGuard, @selector(startRoomRouteFlowWithUserModel:animation:), (IMP)&_logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$, (IMP*)&_logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserModel$animation$);MSHookMessageEx(_logos_metaclass$_ungrouped$LiveRoomGuard, @selector(startRoomRouteFlowWithUserID:animation:), (IMP)&_logos_meta_method$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$, (IMP*)&_logos_meta_orig$_ungrouped$LiveRoomGuard$startRoomRouteFlowWithUserID$animation$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setAnimation:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setAnimation$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setAnimation$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(animation), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$animation, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$animation);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setTryWatching:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setTryWatching$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setTryWatching$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(tryWatching), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$tryWatching, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$tryWatching);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setWaperedBlock:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setWaperedBlock$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setWaperedBlock$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(waperedBlock), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$waperedBlock, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$waperedBlock);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setPullUrl:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setPullUrl$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setPullUrl$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pullUrl), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pullUrl, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pullUrl);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setLimitDic:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setLimitDic$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setLimitDic$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(limitDic), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$limitDic, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$limitDic);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setUserID:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setUserID$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setUserID$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(userID), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$userID, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$userID);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setModel:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setModel$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setModel$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(model), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$model, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$model);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setPwdView:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setPwdView$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setPwdView$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pwdView), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pwdView, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pwdView);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setToController:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setToController$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setToController$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(toController), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$toController, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$toController);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setDidPushToWatchVc:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setDidPushToWatchVc$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(didPushToWatchVc), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$didPushToWatchVc, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$didPushToWatchVc);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setIsAdminSendNamecard:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setIsAdminSendNamecard$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(isAdminSendNamecard), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$isAdminSendNamecard, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$isAdminSendNamecard);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(setRole:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$setRole$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$setRole$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(role), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$role, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$role);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkVideoMoney), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkVideoMoney, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkVideoMoney);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkUserMoney), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkUserMoney, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkUserMoney);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkLevel), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkLevel, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkLevel);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkTicketReq), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkTicketReq, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkTicketReq);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkPassword:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkPassword$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkPassword$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkVideoPoint), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkVideoPoint, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkVideoPoint);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkUserPoint), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkUserPoint, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkUserPoint);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(removePrivateView), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$removePrivateView, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$removePrivateView);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pulishToPreViewTimeRoom), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pulishToPreViewTimeRoom);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(previewPrivateRoom), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$previewPrivateRoom, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$previewPrivateRoom);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pushAnchorBalanceVC), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pushAnchorBalanceVC);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pushToShareVC), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pushToShareVC, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pushToShareVC);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(checkPrivate:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$checkPrivate$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$checkPrivate$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(previewLiveRoom), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$previewLiveRoom, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$previewLiveRoom);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(showPrivateCheckView), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$showPrivateCheckView, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$showPrivateCheckView);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(closeRoomWithAlert:), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$closeRoomWithAlert$, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$closeRoomWithAlert$);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(pushToLiveRoom), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$pushToLiveRoom, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$pushToLiveRoom);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(startLimitActionFlow), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$startLimitActionFlow, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$startLimitActionFlow);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(getRoomType), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$getRoomType, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$getRoomType);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(fetchRoomData), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$fetchRoomData, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$fetchRoomData);MSHookMessageEx(_logos_class$_ungrouped$LiveRoomGuard, @selector(bindLogic), (IMP)&_logos_method$_ungrouped$LiveRoomGuard$bindLogic, (IMP*)&_logos_orig$_ungrouped$LiveRoomGuard$bindLogic);} }
#line 258 "/Users/liangze/Documents/Desktop/pojieAPPS/Zhibo/ZhiboDylib/Logos/ZhiboDylib.xm"
