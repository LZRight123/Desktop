//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSData, NSString;

@interface GMEllipticCurveCrypto : NSObject
{
    int _bytes;
    int _numDigits;
    unsigned long long *_curve_p;
    unsigned long long *_curve_b;
    unsigned long long *_curve_Gx;
    unsigned long long *_curve_Gy;
    unsigned long long *_curve_n;
    NSData *_publicKey;
    _Bool _compressedPublicKey;
    int _bits;
    NSString *_name;
    NSData *_privateKey;
}

+ (id)cryptoForCurve:(int)arg1;
+ (id)cryptoForKeyBase64:(id)arg1;
+ (id)cryptoForKey:(id)arg1;
+ (int)curveForKeyBase64:(id)arg1;
+ (int)curveForKey:(id)arg1;
+ (id)generateKeyPairForCurve:(int)arg1;
@property(retain, nonatomic) NSData *privateKey; // @synthesize privateKey=_privateKey;
@property(nonatomic) _Bool compressedPublicKey; // @synthesize compressedPublicKey=_compressedPublicKey;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, nonatomic) int bits; // @synthesize bits=_bits;
- (void).cxx_destruct;
- (id)description;
@property(retain, nonatomic) NSString *publicKeyBase64;
@property(retain, nonatomic) NSData *publicKey;
@property(retain, nonatomic) NSString *privateKeyBase64;
- (id)decompressPublicKey:(id)arg1;
- (id)compressPublicKey:(id)arg1;
- (id)publicKeyForPrivateKey:(id)arg1;
@property(readonly, nonatomic) int signatureLength;
@property(readonly, nonatomic) int sharedSecretLength;
@property(readonly, nonatomic) int hashLength;
- (_Bool)verifySignature:(id)arg1 forHash:(id)arg2;
- (id)signatureForHash:(id)arg1;
- (id)sharedSecretForPublicKeyBase64:(id)arg1;
- (id)sharedSecretForPublicKey:(id)arg1;
- (_Bool)generateNewKeyPair;
- (id)initWithCurve:(int)arg1;
- (_Bool)hashSHA384AndVerifyEncodedSignature:(id)arg1 forData:(id)arg2;
- (_Bool)hashSHA256AndVerifyEncodedSignature:(id)arg1 forData:(id)arg2;
- (_Bool)verifyEncodedSignature:(id)arg1 forHash:(id)arg2;
- (id)hashSHA384AndSignDataEncoded:(id)arg1;
- (id)hashSHA256AndSignDataEncoded:(id)arg1;
- (id)encodedSignatureForHash:(id)arg1;
- (id)hashSHA384AndSignData:(id)arg1;
- (_Bool)hashSHA384AndVerifySignature:(id)arg1 forData:(id)arg2;
- (id)hashSHA256AndSignData:(id)arg1;
- (_Bool)hashSHA256AndVerifySignature:(id)arg1 forData:(id)arg2;

@end

